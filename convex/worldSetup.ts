import { mutation, query } from "./_generated/server";
import { v } from "convex/values";
import { getAuthUserId } from "@convex-dev/auth/server";

export const createWorld = mutation({
  args: {
    setupAnswers: v.object({
      worldType: v.string(),
      supremeBeing: v.object({
        name: v.string(),
        type: v.string(),
        purpose: v.string(),
      }),
      creationRules: v.object({
        time: v.string(),
        death: v.string(),
        nature: v.string(),
        morality: v.string(),
      }),
      inhabitants: v.string(),
      simulationSpeed: v.string(),
    }),
  },
  handler: async (ctx, args) => {
    const userId = await getAuthUserId(ctx);
    if (!userId) {
      throw new Error("Must be authenticated to create a world");
    }

    // Check if user already has a world
    const existingWorld = await ctx.db
      .query("worlds")
      .withIndex("by_user", (q) => q.eq("userId", userId))
      .first();

    if (existingWorld) {
      throw new Error("You already have a world. Only one world per god is allowed.");
    }

    const worldId = await ctx.db.insert("worlds", {
      userId,
      name: "", // Will be generated by AI
      setupAnswers: args.setupAnswers,
      regions: [],
      factions: [],
      beliefSystems: [],
      currentState: {
        year: 1,
        season: "Spring",
        weather: "Calm",
        balanceOfPower: "Balanced",
        majorEvents: [],
      },
      isSetupComplete: false,
      currentTurn: 0,
    });

    return worldId;
  },
});

export const getUserWorld = query({
  args: {},
  handler: async (ctx) => {
    const userId = await getAuthUserId(ctx);
    console.log("getUserWorld query - userId:", userId);
    
    if (!userId) {
      return null;
    }

    const world = await ctx.db
      .query("worlds")
      .withIndex("by_user", (q) => q.eq("userId", userId))
      .first();

    console.log("getUserWorld query - world:", world);
    return world;
  },
});

export const updateWorldGeneration = mutation({
  args: {
    worldId: v.id("worlds"),
    worldData: v.object({
      name: v.string(),
      regions: v.array(v.object({
        name: v.string(),
        geography: v.string(),
        resources: v.array(v.string()),
      })),
      factions: v.array(v.object({
        name: v.string(),
        type: v.string(),
        alignment: v.string(),
        beliefs: v.string(),
        leadership: v.string(),
        strength: v.number(),
        population: v.number(),
      })),
      beliefSystems: v.array(v.string()),
    }),
  },
  handler: async (ctx, args) => {
    const userId = await getAuthUserId(ctx);
    if (!userId) {
      throw new Error("Must be authenticated");
    }

    const world = await ctx.db.get(args.worldId);
    if (!world || world.userId !== userId) {
      throw new Error("World not found or access denied");
    }

    await ctx.db.patch(args.worldId, {
      name: args.worldData.name,
      regions: args.worldData.regions,
      factions: args.worldData.factions,
      beliefSystems: args.worldData.beliefSystems,
      isSetupComplete: true,
    });

    return args.worldId;
  },
});
